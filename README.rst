

.. _l-README:

README / Changes
================

.. image:: https://travis-ci.org/sdpython/pyquickhelper.svg?branch=master
    :target: https://travis-ci.org/sdpython/pyquickhelper
    :alt: Build status
    
.. image:: https://ci.appveyor.com/api/projects/status/54vl69ssd8ud4l64?svg=true
    :target: https://ci.appveyor.com/project/sdpython/pyquickhelper
    :alt: Build Status Windows
    
.. image:: https://badge.fury.io/py/pyquickhelper.svg
    :target: http://badge.fury.io/py/pyquickhelper
        
.. image:: http://img.shields.io/pypi/dm/pyquickhelper.png
    :alt: PYPI Package
    :target: https://pypi.python.org/pypi/pyquickhelper
    
.. image:: http://img.shields.io/github/issues/sdpython/pyquickhelper.png
    :alt: GitHub Issues
    :target: https://github.com/sdpython/pyquickhelper/issues
    
.. image:: https://img.shields.io/badge/license-MIT-blue.svg
    :alt: MIT License
    :target: http://opensource.org/licenses/MIT
    
.. image:: https://coveralls.io/repos/sdpython/pyquickhelper/badge.svg?branch=master&service=github 
    :target: https://coveralls.io/github/sdpython/pyquickhelper?branch=master     
    

**Links:**

* `pypi/pyquickhelper <https://pypi.python.org/pypi/pyquickhelper/>`_
* `GitHub/pyquickhelper <https://github.com/sdpython/pyquickhelper>`_
* `documentation <http://www.xavierdupre.fr/app/pyquickhelper/helpsphinx/index.html>`_
* `Windows Setup <http://www.xavierdupre.fr/site2013/index_code.html#pyquickhelper>`_
* `Travis <https://travis-ci.org/sdpython/pyquickhelper>`_
* `Blog <http://www.xavierdupre.fr/app/pyquickhelper/helpsphinx/blog/main_0000.html#ap-main-0>`_

Functionalities
---------------

* simple forms in notebooks
* help generation including notebook conversion
* folder synchronization
* logging
* help running unit tests
* simple server to server sphinx documentation
* file compression, zip, gzip, 7z
* helpers for ipython notebooks (upgrade, offline run)
* parser to quickly add a magic command in a notebook
* Sphinx directives to integrate a blogpost in the documentation
* mechanism to add forms in notebooks

Design
------

This project contains the following folders:

* a source folder: *src*
* a unit test folder: *_unittests*, go to this folder and run *run_unittests.py*
* a folder: *_doc*, it will contain the documentation, a subfolder *_doc/sphinxdox/source/blog* contains blog post
  to communicate on the module
* a file *setup.py* to build and to install the module, if the source were retrieve from GitHub,
  the script can also be called with the following extra options (*python setup.py <option>*):
  * clean_space: remove extra spaces in the code
  * build_sphinx: builds the documentation
  * unittests: run the unit tests, compute the code coverage    
* a script *build_script.bat* which produces many script on Windows to easily run the setup,
  generate the documentation, run the unit tests.

Versions, Changes
-----------------

* **1.3 - 2015/??/??**
    * **add:** add function check_readme_syntax to check the syntax of file readme.rst 
      (pipy uses an earlier version of docutils)
    * **fix:** fix a bug in function *compare_module_version*
    * **add:** new function find_notebook_kernel and get_notebook_kernel to find installed kernels on a computer
    * **change:** class NotebookRunner now allows to specify a kernel name and to add extra parameters on the command line,
      this change was propagated to function find_notebook_kernel, get_notebook_kernel
    * **change:** update script generated by the module to start using jupyter short cuts instead of ipython
    * **add:** function to install notebook extension and to load them (see notebook section)
    * **add:** function *install_jupyter_kernel* to install a kernel for a notebook
    * **add:** add a filtering option to remove file from the coverage report
    * **fix:** run unit tests having SKIP in their names (it was LONG before)
    * **add:** add functions to run before and after the documentation generation 
      (to add extra files, to remove, to modify, ...)
    * **change:** function *rst2html* now interprets sphinx directives and not only directives
    * **add:** parameters *no_eval*, *eval_type* to method *add_argument* for parsers used for magic command lines, 
      it avoids the value of the parameter to be considered as a python expression or enforce the 
      type of the returned value
    * **change:** update the module to handle Python 3.5
    * **add:** add method *delete_all_jobs* to class *JenkinsExt*
    * **change:** refactor class *JenkinsExt* to handle more python versions
    * **update:** javascript producing the automated menu in a notebook was adapted to be efficient
      in a RST converted notebook
    * **add:** add script ``auto_cmd_copy_sphinx.bat`` which copies the documentation from ``_doc/sphinxdoc/build`` to ``dist``
    * **change:** use local latex engine instead of matplotlib engine to convert formulas into images
    * **add:** catch exception *SystemExit* in method *run_cmd* if required
    * **new:** documentation builds a new page gathering all commands ``@NB``

* **1.2.781 - 2015/08/15**
    * **change:** parameter prog was added to class MagicCommandParser
      *this might break classes taking dependency on it*
    * **add:** function write_pyproj to generate a file *.pyproj*
      to be used by `PTVS <http://microsoft.github.io/PTVS/>`_.
    * **add:** directive RunPythonDirective to generate documentation from a script
    * **new:** function *create_virtual_env* to create a virtual environment and write unit tests using them
    * **new:** update to Jupyter 4.0 (add dependencies on notebook, nbformat, ...)
    * **fix:** many fixes in documentation generatation, possibility to add blogs with directive *BlogPostDirection*, 
      better sidebar, languages, update the default configuration

* **1.1 - 2015/05/24**
    * **fix:** shorten setup.py, move functionalities to the module, 
      move utils_test.py to subfolder pycode
    * **change:** improve the generation of automated documentation
    * **change:** function *create_visual_diff_through_html_files*
      now returns appropriate objects to display the results into a notebook, it can also retrieve
      the content from a url or string
    * **add:** functions read_url and read_content_ufs
      to read content from a string, a file, a url, a stream
    * **add:** add function set_notebook_name_theNotebook
      to set the notebook name into variable *theNotebook* within a notebook
    * **add:** add the possibility the run some code before executing a notebook
      (to populate a context for example)
    * **add:** revisit the automated scripts (.bat), they are now generated by the module itself,
      see function process_standard_options_for_setup
    * **add:** add format *slides* when converting a notebook
    * **add:** add function write_module_scripts which writes some helpful scripts
    * **add:** form interacting with Python functions in a notebook
    * **new:** the automated documentation now tries to split notebooks in slides by adding
      metadata, see method *pyquickhelper.ipythonhelper.notebook_runner.NotebookRunner.add_tag_slide*
    * **add:** function *pyquickhelper.ipythonhelper.helper_in_notebook.add_notebook_menu*
      to automatically add a menu in a notebook 
      (which still shows up when the notebook is converted into another format)
    * **add:** the automated documentation now generates files .chm if it is done on Windows.
    * **new:** method merge_notebook to merge notebooks into one
    * **new:** method nb2slides to convert a notebook into slides
